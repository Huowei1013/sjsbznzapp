package com.bysj.znzapp.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;


import com.bysj.znzapp.bean.UserInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property Account = new Property(2, String.class, "account", false, "ACCOUNT");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Post = new Property(5, String.class, "post", false, "POST");
        public final static Property PostStr = new Property(6, String.class, "postStr", false, "POST_STR");
        public final static Property Token = new Property(7, String.class, "token", false, "TOKEN");
        public final static Property DepartName = new Property(8, String.class, "departName", false, "DEPART_NAME");
        public final static Property XzName = new Property(9, String.class, "xzName", false, "XZ_NAME");
        public final static Property Email = new Property(10, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(11, String.class, "phone", false, "PHONE");
        public final static Property IsJdUser = new Property(12, boolean.class, "isJdUser", false, "IS_JD_USER");
        public final static Property DisplayDeptName = new Property(13, String.class, "displayDeptName", false, "DISPLAY_DEPT_NAME");
        public final static Property UserDataLevel = new Property(14, String.class, "userDataLevel", false, "USER_DATA_LEVEL");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT UNIQUE ," + // 1: userId
                "\"ACCOUNT\" TEXT," + // 2: account
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"POST\" TEXT," + // 5: post
                "\"POST_STR\" TEXT," + // 6: postStr
                "\"TOKEN\" TEXT," + // 7: token
                "\"DEPART_NAME\" TEXT," + // 8: departName
                "\"XZ_NAME\" TEXT," + // 9: xzName
                "\"EMAIL\" TEXT," + // 10: email
                "\"PHONE\" TEXT," + // 11: phone
                "\"IS_JD_USER\" INTEGER NOT NULL ," + // 12: isJdUser
                "\"DISPLAY_DEPT_NAME\" TEXT," + // 13: displayDeptName
                "\"USER_DATA_LEVEL\" TEXT);"); // 14: userDataLevel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }

        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }

        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }

        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(6, post);
        }

        String postStr = entity.getPostStr();
        if (postStr != null) {
            stmt.bindString(7, postStr);
        }

        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(8, token);
        }

        String departName = entity.getDepartName();
        if (departName != null) {
            stmt.bindString(9, departName);
        }

        String xzName = entity.getXzName();
        if (xzName != null) {
            stmt.bindString(10, xzName);
        }

        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }

        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(12, phone);
        }
        stmt.bindLong(13, entity.getIsJdUser() ? 1L: 0L);

        String displayDeptName = entity.getDisplayDeptName();
        if (displayDeptName != null) {
            stmt.bindString(14, displayDeptName);
        }

        String userDataLevel = entity.getUserDataLevel();
        if (userDataLevel != null) {
            stmt.bindString(15, userDataLevel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }

        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(3, account);
        }

        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }

        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }

        String post = entity.getPost();
        if (post != null) {
            stmt.bindString(6, post);
        }

        String postStr = entity.getPostStr();
        if (postStr != null) {
            stmt.bindString(7, postStr);
        }

        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(8, token);
        }

        String departName = entity.getDepartName();
        if (departName != null) {
            stmt.bindString(9, departName);
        }

        String xzName = entity.getXzName();
        if (xzName != null) {
            stmt.bindString(10, xzName);
        }

        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(11, email);
        }

        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(12, phone);
        }
        stmt.bindLong(13, entity.getIsJdUser() ? 1L: 0L);

        String displayDeptName = entity.getDisplayDeptName();
        if (displayDeptName != null) {
            stmt.bindString(14, displayDeptName);
        }

        String userDataLevel = entity.getUserDataLevel();
        if (userDataLevel != null) {
            stmt.bindString(15, userDataLevel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // account
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // post
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // postStr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // token
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // departName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // xzName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // email
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // phone
            cursor.getShort(offset + 12) != 0, // isJdUser
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // displayDeptName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // userDataLevel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccount(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPost(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPostStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setToken(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDepartName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setXzName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEmail(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPhone(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsJdUser(cursor.getShort(offset + 12) != 0);
        entity.setDisplayDeptName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUserDataLevel(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
//        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
